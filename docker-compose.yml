version: '3.9'

services:

  tweeter-mongodb:
    image: mongo:latest
    container_name: tweeter-mongodb
    restart: always
    volumes:
      - ./mongo/data:/data/db
    ports:
      - 8007:27017

  tweeter-messages-write-api:
    image: tweeter-messages-api:latest
    container_name: write-api
    restart: always
    depends_on:
      - tweeter-mongodb
      - kafka-server
    build:
      context: ../tweeter-messages-api/
      dockerfile: ../tweeter-messages-api/Api/Dockerfile
    ports:
      - 8000:80
    environment:
      DB_CONNECTION_STRING: mongodb://tweeter-mongodb:27017
      DB_NAME: tweeter-messages
      DB_TWEET_COLLECTION: tweet
      DB_REPLY_COLLECTION: reply
      KAFKA_SERVER: kafka-server:29092
      KAFKA_CREATE_TWEET_TOPIC_NAME: "CreateTweet"
      KAFKA_ADD_REPLY_TOPIC_NAME: "AddReply"
      LOGSTASH_URI: http://logstash:28080
      ASPNETCORE_ENVIRONMENT: Development

  tweeter-messages-read-api:
    image: tweeter-messages-read-api:latest
    container_name: read-api
    restart: always
    depends_on:
      - tweeter-mongodb
    build:
      context: ../tweeter-messages-read-api/
      dockerfile: ../tweeter-messages-read-api/Api/Dockerfile
    ports:
      - 8001:80    
    environment:
      DB_CONNECTION_STRING: mongodb://tweeter-mongodb:27017
      DB_NAME: tweeter-messages
      DB_TWEET_COLLECTION: tweet
      DB_REPLY_COLLECTION: reply
      LOGSTASH_URI: http://logstash:28080
      ASPNETCORE_ENVIRONMENT: Development

  tweeter-messages-synchroniser:
    image: tweeter-messages-synchroniser:latest
    container_name: synchroniser
    restart: always
    depends_on:
      - tweeter-mongodb
      - kafka-server
      - prometheus
      - grafana
    build:
      context: ../tweeter-messages-synchroniser/
      dockerfile: ../tweeter-messages-synchroniser/Synchroniser/Dockerfile
    ports:
      - 8002:80    
    environment:
      DB_CONNECTION_STRING: mongodb://tweeter-mongodb:27017
      DB_NAME: tweeter-messages
      DB_TWEET_COLLECTION: tweet
      DB_REPLY_COLLECTION: reply
      KAFKA_SERVER: kafka-server:29092
      KAFKA_CREATE_TWEET_TOPIC_NAME: "CreateTweet"
      KAFKA_ADD_REPLY_TOPIC_NAME: "AddReply"
      ASPNETCORE_ENVIRONMENT: Development

  identity-server-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: identity-server-db
    restart: always
    volumes:
      - ./mssql/data:/var/opt/mssql/data
    ports:
      - 1433:1433
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: mypassword123

  identity-server:
    image: tweeter-identity-server:latest
    container_name: identity-server
    restart: always
    depends_on:
      - identity-server-db
    build:
      context: ../tweeter-identity-server/
      dockerfile: ../tweeter-identity-server/Web/Dockerfile
    ports:
      - 8003:80    
    environment:
      DB_CONNECTION_STRING: Initial Catalog=tweeterIdentity; Data Source=identity-server-db; Persist Security Info=True;User ID=SA;Password=mypassword123
      ASPNETCORE_ENVIRONMENT: Development

  tweeter-api-gateway:
    image: tweeter-api-gateway:latest
    container_name: gateway
    restart: always
    depends_on:
      - tweeter-messages-read-api
      - tweeter-messages-write-api
    build:
      context: ../tweeter-api-gateway/
      dockerfile: ../tweeter-api-gateway/Gateway/Dockerfile
    ports:
      - 5050:80    
    environment:
      ASPNETCORE_ENVIRONMENT: Development

  zookeeper-server:
    image: bitnami/zookeeper:latest
    container_name: zookeeper-server
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: PLAINTEXT://kafka-server:29092
      JVM_OPTS: -Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify
      SCHEMAREGISTRY_CONNECT: http://schema-registry:8081
    depends_on:
      - kafka-server

  kafka-server:
    image: bitnami/kafka:latest
    container_name: kafka-server
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-server:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:29092,PLAINTEXT_HOST://127.0.0.1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper-server

  # This container is used for creating new topics during all the containers start
  init-kafka:
    image: bitnami/kafka:latest
    container_name: init-kafka
    depends_on:
      - kafka-server
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka-server:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka-server:29092 --create --if-not-exists --topic CreateTweet --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka-server:29092 --create --if-not-exists --topic AddReply --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka-server:29092 --list
      "

  prometheus:
    image: ubuntu/prometheus
    container_name: prometheus
    ports:
      - "30090:9090"
    environment:
      - TZ=UTC
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "30091:3000"
    volumes:
      - ./grafana-data/data:/var/lib/grafana
   
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    ports:
     - 9200:9200
    volumes:
     - ./elasticsearch-data:/usr/share/elasticsearch/data
    environment:
     - xpack.monitoring.enabled=true
     - xpack.watcher.enabled=false
     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
     - discovery.type=single-node

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.16.1
    ports:
     - 5601:5601
    depends_on:
     - elasticsearch
    environment:
     - "ELASTICSEARCH_URL=http://elasticsearch:9200"

  logstash: 
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.4.1
    volumes:
      - ./logstash:/usr/share/logstash/pipeline
    ports:
      - 5000:5000
    #environment:
      #
    environment:
      - "XPACK_MONITORING_ELASTICSEARCH_URL=http://elasticsearch:9200"
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
      - kibana

  sonarqube:
    container_name: sonarqube
    image: sonarqube:latest
    environment: 
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - 9000:9000